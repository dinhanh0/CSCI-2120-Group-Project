import java.io.*;
import java.util.*;

public class AddItems {
    private static final String CART_FILE = "cart.csv";

    public static void addItem(Scanner scanner, double budget, String storeName) {
        System.out.println("Adding items to your cart from store: " + storeName);

        // List of available items in the store
        List<Grocery> availableItems = getAvailableItems(storeName);

        if (availableItems.isEmpty()) {
            System.out.println("No items available in this store.");
            return;
        }

        // Display available items
        int index = 1;
        for (Grocery item : availableItems) {
            System.out.println(index + ". " + item.getName() + " - $" + item.getPrice());
            index++;
        }

        List<Grocery> selectedItems = new ArrayList<>();

        // Loop to allow user to add items to the cart
        while (true) {
            System.out.print("Enter the number of the item to add to cart (or 0 to stop): ");
            int choice = scanner.nextInt();

            if (choice == 0) {
                break;
            } else if (choice > 0 && choice <= availableItems.size()) {
                Grocery selectedItem = availableItems.get(choice - 1);
                selectedItems.add(selectedItem);
                System.out.println(selectedItem.getName() + " added to cart.");
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }

        // Write selected items to the cart file
        writeCart(selectedItems);
    }

    private static List<Grocery> getAvailableItems(String storeName) {
        // Placeholder for actual implementation to fetch store-specific items
        return Arrays.asList(
                new Grocery("Milk", "Dairy", 3.5, storeName),
                new Grocery("Bread", "Bakery", 2.0, storeName),
                new Grocery("Eggs", "Dairy", 4.0, storeName),
                new Grocery("Apples", "Produce", 1.5, storeName)
        );
    }

    private static void writeCart(List<Grocery> selectedItems) {
        try (PrintWriter pw = new PrintWriter(new FileWriter(CART_FILE, true))) {
            for (Grocery item : selectedItems) {
                pw.println(item.getName() + "," + item.getCategory() + "," + item.getPrice() + "," + item.getStoreName());
            }
        } catch (IOException e) {
            System.err.println("Error writing to cart file: " + e.getMessage());
        }
    }

    public static double viewCart(Scanner scanner, double budget) {
        // Read all items that are currently in the cart
        List<String[]> cart = readCsv(CART_FILE);
        if (cart.isEmpty()) {
            System.out.println("Your cart is empty.");
            return budget;
        }

        // Calculate the total price of items in the cart
        double totalPrice = 0;
        System.out.println("Items in your cart:");
        for (String[] item : cart) {
            String itemName = item[0];
            double price = Double.parseDouble(item[2]);
            totalPrice += price;
            System.out.println(itemName + " - $" + price);
        }

        System.out.println("Total price: $" + totalPrice);
        System.out.print("Are you ready to check out? (yes/no): ");
        String checkoutChoice = scanner.next();

        if ("yes".equalsIgnoreCase(checkoutChoice)) {
            if (budget >= totalPrice) { // Check if the user has enough budget
                double remainingBudget = budget - totalPrice;
                System.out.println("You successfully bought the items. Remaining budget: $" + remainingBudget);

                // Clear the cart after successful checkout
                clearCart();
                return remainingBudget; // Return the remaining budget after purchase
            } else {
                System.out.println("Insufficient funds. Please remove items from your cart or increase your budget.");
            }
        } else if ("clear".equalsIgnoreCase(checkoutChoice)) {
            System.out.println("Clearing your cart...");
            clearCart();
            System.out.println("Cart has been cleared. Returning to the main menu.");
        } else {
            System.out.println("Checkout canceled. Returning to main menu.");
        }

        return budget; // Return the original budget if the user cancels the checkout
    }

    // Helper method to read the cart file
    private static List<String[]> readCsv(String fileName) {
        List<String[]> data = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                data.add(line.split(","));
            }
        } catch (IOException e) {
            System.err.println("Error reading the cart file: " + e.getMessage());
        }
        return data;
    }

    // Helper method to clear the cart
    private static void clearCart() {
        try (PrintWriter pw = new PrintWriter(CART_FILE)) {
            // Opening the file in overwrite mode clears its contents
        } catch (IOException e) {
            System.err.println("Error clearing the cart file: " + e.getMessage());
        }
    }
}

